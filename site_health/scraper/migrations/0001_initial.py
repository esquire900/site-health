# Generated by Django 3.0.7 on 2020-06-28 13:15

import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import scraper.models.base


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("website", "0004_page_is_home"),
    ]

    operations = [
        migrations.CreateModel(
            name="SSLCertScraper",
            fields=[
                ("id", models.UUIDField(primary_key=True, serialize=False)),
                ("planned_at", models.DateTimeField(auto_now_add=True)),
                ("scraped_at", models.DateTimeField(null=True)),
                ("status", models.SmallIntegerField(default=0)),
                (
                    "page",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="website.Page"
                    ),
                ),
            ],
            options={"abstract": False,},
            bases=(
                models.Model,
                scraper.models.base.ScraperPickleCache,
                scraper.models.base.ScraperFileCache,
            ),
        ),
        migrations.CreateModel(
            name="PageScraper",
            fields=[
                ("id", models.UUIDField(primary_key=True, serialize=False)),
                ("planned_at", models.DateTimeField(auto_now_add=True)),
                ("scraped_at", models.DateTimeField(null=True)),
                ("status", models.SmallIntegerField(default=0)),
                (
                    "page",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="website.Page"
                    ),
                ),
            ],
            options={"abstract": False,},
            bases=(models.Model, scraper.models.base.ScraperPickleCache),
        ),
        migrations.CreateModel(
            name="PageBrowserScraper",
            fields=[
                ("id", models.UUIDField(primary_key=True, serialize=False)),
                ("planned_at", models.DateTimeField(auto_now_add=True)),
                ("scraped_at", models.DateTimeField(null=True)),
                ("status", models.SmallIntegerField(default=0)),
                ("take_screenshot", models.BooleanField(default=False)),
                (
                    "screen_width",
                    models.IntegerField(
                        default=1280,
                        validators=[
                            django.core.validators.MaxValueValidator(1800),
                            django.core.validators.MinValueValidator(200),
                        ],
                    ),
                ),
                (
                    "wait_ms_before_screenshot",
                    models.IntegerField(
                        default=300,
                        validators=[
                            django.core.validators.MaxValueValidator(1000),
                            django.core.validators.MinValueValidator(0),
                        ],
                    ),
                ),
                (
                    "page",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="website.Page"
                    ),
                ),
            ],
            options={"abstract": False,},
            bases=(models.Model, scraper.models.base.ScraperPickleCache),
        ),
    ]
